<ui:ObservableWindow
	x:Class="PEunion.WindowMain"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:local="clr-namespace:PEunion"
	xmlns:api="https://schemas.bytecode77.com/2019/xaml/api"
	xmlns:ui="https://schemas.bytecode77.com/2019/xaml/presentation"
	mc:Ignorable="d"
	Title="PEunion" Width="1100" Height="750" MinWidth="900" MinHeight="550" WindowStartupLocation="CenterScreen" ResizeMode="CanResizeWithGrip" UseLayoutRounding="True" SourceInitialized="Window_SourceInitialized" Closing="Window_Closing">
	<Window.CommandBindings>
		<CommandBinding Command="{x:Static local:WindowMain.NewCommand}" Executed="NewCommand_Executed" />
		<CommandBinding Command="{x:Static local:WindowMain.OpenCommand}" Executed="OpenCommand_Executed" />
		<CommandBinding Command="{x:Static local:WindowMain.SaveCommand}" Executed="SaveCommand_Executed" />
		<CommandBinding Command="{x:Static local:WindowMain.SaveAsCommand}" Executed="SaveAsCommand_Executed" />
		<CommandBinding Command="{x:Static local:WindowMain.BuildCommand}" Executed="BuildCommand_Executed" />
		<CommandBinding Command="{x:Static local:WindowMain.BuildCodeCommand}" Executed="BuildCodeCommand_Executed" />
		<CommandBinding Command="{x:Static local:WindowMain.MoveSelectedProjectItemCommand}" Executed="MoveSelectedProjectItem_Executed" CanExecute="MoveSelectedProjectItem_CanExecute" />
		<CommandBinding Command="{x:Static local:WindowMain.DeleteSelectedProjectItemCommand}" Executed="DeleteSelectedProjectItem_Executed" />
	</Window.CommandBindings>
	<Window.InputBindings>
		<KeyBinding Key="N" Modifiers="Ctrl" Command="{x:Static local:WindowMain.NewCommand}" />
		<KeyBinding Key="O" Modifiers="Ctrl" Command="{x:Static local:WindowMain.OpenCommand}" />
		<KeyBinding Key="S" Modifiers="Ctrl" Command="{x:Static local:WindowMain.SaveCommand}" />
		<KeyBinding Key="S" Modifiers="Ctrl+Shift" Command="{x:Static local:WindowMain.SaveAsCommand}" />
		<KeyBinding Key="B" Modifiers="Ctrl" Command="{x:Static local:WindowMain.BuildCommand}" />
		<KeyBinding Key="B" Modifiers="Ctrl+Shift" Command="{x:Static local:WindowMain.BuildCodeCommand}" />
	</Window.InputBindings>
	<Control.Resources>
		<ContextMenu x:Key="mnuTreeItems">
			<MenuItem Header="Add Files..." ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconAddFiles.png" Click="mnuTreeItemsAddFiles_Click" />
			<MenuItem Header="Add Message Box" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconAddMessageBox.png" Click="mnuTreeItemsAddMessageBox_Click" />
			<MenuItem Header="Add URL" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconAddUrl.png" Click="mnuTreeItemsAddUrl_Click" />
		</ContextMenu>
		<ContextMenu x:Key="mnuTreeFile">
			<MenuItem Header="Add">
				<MenuItem Header="Files..." ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconAddFiles.png" Click="mnuTreeItemsAddFiles_Click" />
				<MenuItem Header="Message Box" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconAddMessageBox.png" Click="mnuTreeItemsAddMessageBox_Click" />
				<MenuItem Header="URL" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconAddUrl.png" Click="mnuTreeItemsAddUrl_Click" />
			</MenuItem>
			<Separator />
			<MenuItem Header="Move Up" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconArrowUp.png" Command="{x:Static local:WindowMain.MoveSelectedProjectItemCommand}" CommandParameter="{ui:Int32 -1}" />
			<MenuItem Header="Move Down" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconArrowDown.png" Command="{x:Static local:WindowMain.MoveSelectedProjectItemCommand}" CommandParameter="{ui:Int32 1}" />
			<Separator />
			<MenuItem Header="Open Folder" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconDirectory.png" Click="mnuTreeFileOpenSourceDirectory_Click" />
			<MenuItem Header="Properties" Click="mnuTreeFileProperties_Click" />
			<Separator />
			<MenuItem Header="Delete" InputGestureText="Del" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconDelete.png" Command="{x:Static local:WindowMain.DeleteSelectedProjectItemCommand}" />
		</ContextMenu>
		<ContextMenu x:Key="mnuTreeUrl">
			<MenuItem Header="Add">
				<MenuItem Header="Files..." ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconAddFiles.png" Click="mnuTreeItemsAddFiles_Click" />
				<MenuItem Header="Message Box" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconAddMessageBox.png" Click="mnuTreeItemsAddMessageBox_Click" />
				<MenuItem Header="URL" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconAddUrl.png" Click="mnuTreeItemsAddUrl_Click" />
			</MenuItem>
			<Separator />
			<MenuItem Header="Move Up" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconArrowUp.png" Command="{x:Static local:WindowMain.MoveSelectedProjectItemCommand}" CommandParameter="{ui:Int32 -1}" />
			<MenuItem Header="Move Down" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconArrowDown.png" Command="{x:Static local:WindowMain.MoveSelectedProjectItemCommand}" CommandParameter="{ui:Int32 1}" />
			<Separator />
			<MenuItem Header="Delete" InputGestureText="Del" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconDelete.png" Command="{x:Static local:WindowMain.DeleteSelectedProjectItemCommand}" />
		</ContextMenu>
		<ContextMenu x:Key="mnuTreeMessageBox">
			<MenuItem Header="Add">
				<MenuItem Header="Files..." ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconAddFiles.png" Click="mnuTreeItemsAddFiles_Click" />
				<MenuItem Header="Message Box" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconAddMessageBox.png" Click="mnuTreeItemsAddMessageBox_Click" />
				<MenuItem Header="URL" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconAddUrl.png" Click="mnuTreeItemsAddUrl_Click" />
			</MenuItem>
			<Separator />
			<MenuItem Header="Move Up" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconArrowUp.png" Command="{x:Static local:WindowMain.MoveSelectedProjectItemCommand}" CommandParameter="{ui:Int32 -1}" />
			<MenuItem Header="Move Down" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconArrowDown.png" Command="{x:Static local:WindowMain.MoveSelectedProjectItemCommand}" CommandParameter="{ui:Int32 1}" />
			<Separator />
			<MenuItem Header="Preview" Click="mnuTreeMessageBoxPreview_Click" />
			<Separator />
			<MenuItem Header="Delete" InputGestureText="Del" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconDelete.png" Command="{x:Static local:WindowMain.DeleteSelectedProjectItemCommand}" />
		</ContextMenu>
	</Control.Resources>
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="*" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>
		<Menu>
			<MenuItem Header="_File">
				<MenuItem Header="_New" InputGestureText="Ctrl+N" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconNew.png" Command="{x:Static local:WindowMain.NewCommand}" />
				<MenuItem Header="_Open..." InputGestureText="Ctrl+O" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconOpen.png" Command="{x:Static local:WindowMain.OpenCommand}" />
				<Separator />
				<MenuItem Header="_Save" InputGestureText="CtrlS+S" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconSave.png" Command="{x:Static local:WindowMain.SaveCommand}" />
				<MenuItem Header="Save _As..." InputGestureText="Ctrl+Shift+S" Command="{x:Static local:WindowMain.SaveAsCommand}" />
				<Separator />
				<MenuItem Header="Open _Project Folder" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconOpenProjectFolder.png" IsEnabled="{Binding Project.SaveLocation, Converter={ui:NullConverter}}" Click="mnuFileOpenProjectFolder_Click" />
				<MenuItem Header="Recent _Projects" ItemsSource="{Binding RecentProjectMenuItems}">
					<MenuItem.Resources>
						<Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
							<EventSetter Event="Click" Handler="mnuFileRecentProject_Click" />
						</Style>
					</MenuItem.Resources>
				</MenuItem>
				<MenuItem Header="Recent _Files" ItemsSource="{Binding RecentFileMenuItems}">
					<MenuItem.Resources>
						<Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
							<EventSetter Event="Click" Handler="mnuFileRecentFile_Click" />
						</Style>
					</MenuItem.Resources>
				</MenuItem>
				<Separator />
				<MenuItem Header="E_xit" InputGestureText="Alt+F4" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconExit.png" Click="mnuFileExit_Click" />
			</MenuItem>
			<MenuItem Header="_Build">
				<MenuItem Header="_Build" InputGestureText="Ctrl+B" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconBuild.png" Command="{x:Static local:WindowMain.BuildCommand}" />
				<MenuItem Header="Generate _Code" InputGestureText="Ctrl+Shift+B" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconCode.png" Command="{x:Static local:WindowMain.BuildCodeCommand}" />
			</MenuItem>
			<MenuItem Header="_Tools">
				<MenuItem Header="_Open AppData Directory" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconDirectory.png" Click="mnuToolsOpenAppDataDirectory_Click" />
				<MenuItem Header="_Register .peu File Extension" Click="mnuToolsRegisterFileExtension_Click" />
				<Separator />
				<MenuItem Header="Right to _Left Override" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconRtlo.png" Click="mnuToolsRtlo_Click" />
			</MenuItem>
			<MenuItem Header="_Help">
				<MenuItem Header="PEunion on _GitHub" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconGitHub.png" Click="mnuHelpGitHub_Click" />
				<Separator />
				<MenuItem Header="_About" ui:MenuItemService.ImageSource="/PEunion;component/Resources/IconAbout.png" Click="mnuHelpAbout_Click" />
			</MenuItem>
		</Menu>
		<ToolBarTray Grid.Row="1">
			<ToolBar>
				<Button ToolTip="New (Ctrl+N)" Command="{x:Static local:WindowMain.NewCommand}">
					<Image Source="/PEunion;component/Resources/IconNew.png" />
				</Button>
				<Button ToolTip="Open (Ctrl+O)" Command="{x:Static local:WindowMain.OpenCommand}">
					<Image Source="/PEunion;component/Resources/IconOpen.png" />
				</Button>
				<Button ToolTip="Save (Ctrl+S)" Command="{x:Static local:WindowMain.SaveCommand}">
					<Image Source="/PEunion;component/Resources/IconSave.png" />
				</Button>
				<Separator />
				<Button ToolTip="Build (Ctrl+B)" Command="{x:Static local:WindowMain.BuildCommand}">
					<Image Source="/PEunion;component/Resources/IconBuild.png" />
				</Button>
				<Button ToolTip="Generate Code (Ctrl+Shift+B)" Command="{x:Static local:WindowMain.BuildCodeCommand}">
					<Image Source="/PEunion;component/Resources/IconCode.png" />
				</Button>
			</ToolBar>
		</ToolBarTray>
		<Grid Grid.Row="2" Style="{StaticResource HorizontalSeparator}" />
		<Grid Grid.Row="3">
			<Grid.RowDefinitions>
				<RowDefinition Height="*" />
				<RowDefinition Height="6" />
				<RowDefinition Height="150" MinHeight="100" />
			</Grid.RowDefinitions>
			<TabControl Name="tabMain" SelectionChanged="tabMain_SelectionChanged">
				<TabControl.Resources>
					<Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource {x:Type TabItem}}">
						<EventSetter Event="MouseUp" Handler="tabMain_TabItem_MouseUp" />
					</Style>
				</TabControl.Resources>
				<TabItem>
					<TabItem.Header>
						<StackPanel Orientation="Horizontal">
							<local:TextDisplay Text="{Binding Project.ProjectName, Converter={ui:StringConverter Concat}, ConverterParameter={ui:String .peu}}" ImageSource="/PEunion;component/Resources/IconPeuFile.png" />
							<TextBlock Name="txtProjectTabIsDirty" Text=" *" />
							<Button Style="{StaticResource CloseButton}" Command="{x:Static local:WindowMain.NewCommand}" />
						</StackPanel>
					</TabItem.Header>
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="250" MinWidth="150" />
							<ColumnDefinition Width="6" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<GroupBox Header="Project" Style="{StaticResource DockPanel}">
							<TreeView Name="treMain" BorderThickness="0" ContextMenu="{StaticResource mnuTreeItems}" SelectedItemChanged="treMain_SelectedItemChanged" ContextMenuOpening="treMain_ContextMenuOpening" KeyDown="treMain_KeyDown">
								<TreeView.Resources>
									<HierarchicalDataTemplate DataType="{x:Type local:ProjectFile}">
										<DockPanel>
											<Grid Margin="0,0,5,0">
												<Image Source="{Binding Icon}" />
												<Image Source="/PEunion;component/Resources/IconUacOverlay.png" Visibility="{Binding Runas, Converter={ui:BooleanConverter Visibility}}" />
											</Grid>
											<TextBlock Text="{Binding Name}" />
										</DockPanel>
									</HierarchicalDataTemplate>
									<HierarchicalDataTemplate DataType="{x:Type local:ProjectMessageBox}">
										<local:TextDisplay Text="{Binding TreeViewItemText, Mode=OneWay}" ImageSource="/PEunion;component/Resources/IconMessageBox.png" />
									</HierarchicalDataTemplate>
									<HierarchicalDataTemplate DataType="{x:Type local:ProjectUrl}">
										<local:TextDisplay Text="{Binding TreeViewItemText, Mode=OneWay}" ImageSource="/PEunion;component/Resources/IconUrl.png" />
									</HierarchicalDataTemplate>
								</TreeView.Resources>
								<TreeViewItem Tag="OutputBinary">
									<TreeViewItem.Header>
										<local:TextDisplay Text="Build" ImageSource="/PEunion;component/Resources/IconBuild.png" />
									</TreeViewItem.Header>
									<TreeViewItem Tag="OutputBinary">
										<TreeViewItem.Header>
											<local:TextDisplay Text="Output Binary" ImageSource="/PEunion;component/Resources/IconOutputBinary.png" />
										</TreeViewItem.Header>
									</TreeViewItem>
									<TreeViewItem Tag="CodeGeneration">
										<TreeViewItem.Header>
											<local:TextDisplay Text="Code Generation" ImageSource="/PEunion;component/Resources/IconCode.png" />
										</TreeViewItem.Header>
									</TreeViewItem>
									<TreeViewItem Tag="Startup">
										<TreeViewItem.Header>
											<local:TextDisplay Text="Startup" ImageSource="/PEunion;component/Resources/IconStartup.png" />
										</TreeViewItem.Header>
									</TreeViewItem>
								</TreeViewItem>
								<TreeViewItem Name="treMainItems" Tag="Items" ItemsSource="{Binding Project.Items}">
									<TreeViewItem.Header>
										<local:TextDisplay Text="Items" ImageSource="/PEunion;component/Resources/IconFiles.png" />
									</TreeViewItem.Header>
									<TreeViewItem.Resources>
										<Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
											<Setter Property="IsSelected" Value="{Binding TreeViewItemIsSelected}" />
										</Style>
									</TreeViewItem.Resources>
								</TreeViewItem>
							</TreeView>
						</GroupBox>
						<GridSplitter Grid.Column="1" ResizeBehavior="PreviousAndNext" HorizontalAlignment="Stretch" />
						<ScrollViewer Grid.Column="2" VerticalScrollBarVisibility="Auto">
							<Grid Name="grdTabs" Background="#f7f7f7">
								<Grid.Resources>
									<Style TargetType="{x:Type TextBlock}">
										<Setter Property="TextWrapping" Value="Wrap" />
									</Style>
									<Style x:Key="TabGrid" TargetType="{x:Type Grid}">
										<Setter Property="Margin" Value="10,5,10,10" />
									</Style>
									<Style x:Key="Title" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
										<Setter Property="Margin" Value="0,0,0,10" />
										<Setter Property="FontSize" Value="20" />
									</Style>
								</Grid.Resources>
								<Grid Tag="OutputBinary" Style="{StaticResource TabGrid}">
									<StackPanel>
										<TextBlock Text="Output Binary" Style="{StaticResource Title}" />
										<Grid>
											<Grid.RowDefinitions>
												<RowDefinition Height="Auto" />
												<RowDefinition Height="Auto" />
											</Grid.RowDefinitions>
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="*" />
												<ColumnDefinition Width="10" />
												<ColumnDefinition Width="*" />
											</Grid.ColumnDefinitions>
											<GroupBox Header="Assembly">
												<StackPanel>
													<local:TextDisplay Text="Platform:" InfoIcon="Platform does not need to match bitness of executed files" Margin="0,0,0,5" HorizontalAlignment="Left" />
													<ComboBox ItemsSource="{x:Static local:Lookups.Platforms}" SelectedValuePath="Key" DisplayMemberPath="Value" SelectedValue="{Binding Project.Platform}" Style="{StaticResource UIComboBox}" Margin="0,0,0,10" />
													<TextBlock Text="Manifest:" Margin="0,0,0,5" />
													<ComboBox ItemsSource="{x:Static local:Lookups.Manifests}" SelectedValuePath="Key" DisplayMemberPath="Value" SelectedValue="{Binding Project.Manifest}" Style="{StaticResource UIComboBox}" />
												</StackPanel>
											</GroupBox>
											<GroupBox Grid.Column="2" Header="Icon">
												<StackPanel>
													<local:FileBrowser x:Name="ctrlBrowseIcon" AllowedExtensions="ico" AllowReset="True" FilesSelect="ctrlBrowseIcon_FilesSelect" Reset="ctrlBrowseIcon_Reset" />
												</StackPanel>
											</GroupBox>
											<GroupBox Grid.Row="1" Header="Assembly Information">
												<StackPanel>
													<Grid Margin="0,0,0,10">
														<Grid.RowDefinitions>
															<RowDefinition Height="Auto" />
															<RowDefinition Height="Auto" />
															<RowDefinition Height="Auto" />
															<RowDefinition Height="Auto" />
														</Grid.RowDefinitions>
														<Grid.ColumnDefinitions>
															<ColumnDefinition Width="Auto" />
															<ColumnDefinition Width="10" />
															<ColumnDefinition Width="*" />
														</Grid.ColumnDefinitions>
														<TextBlock Text="Title" Margin="0,5,0,0" />
														<TextBlock Grid.Row="1" Text="Product" Margin="0,5,0,0" />
														<TextBlock Grid.Row="2" Text="Copyright" Margin="0,5,0,0" />
														<TextBlock Grid.Row="3" Text="Version" Margin="0,5,0,0" />
														<TextBox Grid.Column="2" Text="{Binding Project.AssemblyTitle, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource UITextBox}" Margin="0,0,0,5" />
														<TextBox Grid.Row="1" Grid.Column="2" Text="{Binding Project.AssemblyProduct, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource UITextBox}" Margin="0,0,0,5" />
														<TextBox Grid.Row="2" Grid.Column="2" Text="{Binding Project.AssemblyCopyright, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource UITextBox}" Margin="0,0,0,5" />
														<TextBox Grid.Row="3" Grid.Column="2" Text="{Binding Project.AssemblyVersion, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource UITextBox}" />
													</Grid>
													<Button Content="Select From File..." Style="{StaticResource UIButton}" HorizontalAlignment="Right" Click="btnSelectAssemblyInfo_Click" />
												</StackPanel>
											</GroupBox>
										</Grid>
									</StackPanel>
								</Grid>
								<Grid Tag="CodeGeneration" Style="{StaticResource TabGrid}">
									<StackPanel>
										<TextBlock Text="Code Generation" Style="{StaticResource Title}" />
										<GroupBox>
											<GroupBox.Header>
												<local:TextDisplay Text="Obfuscation" InfoIcon="Obfuscation of symbol names (classes, methods and variables)" />
											</GroupBox.Header>
											<StackPanel>
												<ComboBox ItemsSource="{x:Static local:Lookups.Obfuscations}" SelectedValuePath="Key" DisplayMemberPath="Value" SelectedValue="{Binding Project.Obfuscation}" Style="{StaticResource UIComboBox}" Margin="0,0,0,5" />
												<TextBlock DataContext="{Binding Project.ObfuscationExample}">
													<Run Text="Example:" />
													<Run Text="{Binding .}" />
												</TextBlock>
											</StackPanel>
										</GroupBox>
										<GroupBox Grid.Column="2" Header="String Encryption">
											<StackPanel>
												<CheckBox IsChecked="{Binding Project.StringEncryption}">
													<local:TextDisplay Text="String Encryption" InfoIcon="Encrypt strings for file names and other user-defined variables" />
												</CheckBox>
												<CheckBox IsChecked="{Binding Project.StringLiteralEncryption}">
													<local:TextDisplay Text="String Literal Encryption" InfoIcon="Encrypt constant string literals in code template" />
												</CheckBox>
											</StackPanel>
										</GroupBox>
									</StackPanel>
								</Grid>
								<Grid Tag="Startup" Style="{StaticResource TabGrid}">
									<StackPanel>
										<TextBlock Text="Startup" Style="{StaticResource Title}" />
										<GroupBox>
											<GroupBox.Header>
												<local:TextDisplay Text="Self" InfoIcon="Generated output executable itself, not the dropped files" />
											</GroupBox.Header>
											<StackPanel>
												<CheckBox IsChecked="{Binding Project.DeleteZoneID}">
													<local:TextDisplay Text="Delete ZoneID" InfoIcon="After first run, delete ':Zone.Identifier' alternate data stream to avoid subsequent 'Do you want to run this file?' dialog" />
												</CheckBox>
												<CheckBox IsChecked="{Binding Project.Melt}">
													<local:TextDisplay Text="Melt" InfoIcon="Delete self after exit (Launches a cmd.exe process)" />
												</CheckBox>
											</StackPanel>
										</GroupBox>
									</StackPanel>
								</Grid>
								<Grid Tag="Items" Style="{StaticResource TabGrid}">
									<StackPanel>
										<TextBlock Text="Items" Style="{StaticResource Title}" />
										<TextBlock Text=" • Files and other items are processed in the order they appear on the right side" />
										<TextBlock Text=" • From the context menu, items can be re-ordered or deleted" />
										<Grid Margin="0,10,0,0">
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="*" />
												<ColumnDefinition Width="10" />
												<ColumnDefinition Width="*" />
												<ColumnDefinition Width="10" />
												<ColumnDefinition Width="*" />
											</Grid.ColumnDefinitions>
											<GroupBox Header="Add Files">
												<StackPanel>
													<local:FileBrowser AllowMultiple="True" FilesSelect="ctrlAddFiles_FilesSelect" />
												</StackPanel>
											</GroupBox>
											<GroupBox Grid.Column="2" Header="Add URL">
												<StackPanel>
													<TextBlock Text="Download a file from an URL:" Margin="0,0,0,10" />
													<Button Content="Add URL" Style="{StaticResource UIButton}" HorizontalAlignment="Left" Click="btnAddUrl_Click" />
												</StackPanel>
											</GroupBox>
											<GroupBox Grid.Column="4" Header="Add Message Box">
												<StackPanel>
													<TextBlock Text="Display a fake MessageBox:" Margin="0,0,0,10" />
													<Button Content="Add Message Box" Style="{StaticResource UIButton}" HorizontalAlignment="Left" Click="btnAddMessageBox_Click" />
												</StackPanel>
											</GroupBox>
										</Grid>
									</StackPanel>
								</Grid>
								<Grid Tag="ProjectFile" Style="{StaticResource TabGrid}">
									<StackPanel>
										<TextBlock Text="{Binding SelectedProjectItem.Name}" Style="{StaticResource Title}" />
										<TextBlock Margin="0,0,0,10">
											<Hyperlink Click="mnuTreeFileOpenSourceDirectory_Click"><TextBlock><Run Text="{Binding SelectedProjectItem.SourceDirectory, Mode=OneWay}" /><Run Text="\" /></TextBlock></Hyperlink><Run Text="{Binding SelectedProjectItem.SourceFileName, Mode=OneWay}" />
											<LineBreak />
											<Run Text="Size:" />
											<Run Text="{Binding SelectedProjectItem.SourceFileSize, Mode=OneWay}" />
										</TextBlock>
										<Grid>
											<Grid.RowDefinitions>
												<RowDefinition Height="Auto" />
												<RowDefinition Height="Auto" />
											</Grid.RowDefinitions>
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="*" />
												<ColumnDefinition Width="10" />
												<ColumnDefinition Width="*" />
											</Grid.ColumnDefinitions>
											<GroupBox Header="File Modification">
												<StackPanel>
													<CheckBox Content="Compress" IsChecked="{Binding SelectedProjectItem.Compress}" />
													<CheckBox Content="Encrypt" IsChecked="{Binding SelectedProjectItem.Encrypt}" />
													<CheckBox IsChecked="{Binding SelectedProjectItem.Hidden}">
														<local:TextDisplay Text="Hidden" InfoIcon="Hide file by attributes Hidden|System" />
													</CheckBox>
												</StackPanel>
											</GroupBox>
											<GroupBox Grid.Column="2" Header="Dropping">
												<StackPanel>
													<TextBlock Text="File Name:" Margin="0,0,0,5" />
													<TextBox Text="{Binding SelectedProjectItem.Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource UITextBox}" Margin="0,0,0,10" />
													<TextBlock Text="Location:" Margin="0,0,0,5" />
													<ComboBox ItemsSource="{x:Static local:Lookups.DropLocations}" SelectedValuePath="Key" DisplayMemberPath="Value" SelectedValue="{Binding SelectedProjectItem.DropLocation}" Style="{StaticResource UIComboBox}" />
												</StackPanel>
											</GroupBox>
											<GroupBox Grid.Row="1" Header="Execution">
												<StackPanel>
													<CheckBox Content="Execute" IsChecked="{Binding SelectedProjectItem.Execute}" />
													<CheckBox IsChecked="{Binding SelectedProjectItem.Runas}" IsEnabled="{Binding SelectedProjectItem.Execute}">
														<local:TextDisplay Text="Run as Administrator" InfoIcon="Execute with 'runas' verb (will trigger the UAC dialog)" />
													</CheckBox>
													<CheckBox Content="Wait for exit" IsChecked="{Binding SelectedProjectItem.ExecuteWait}" IsEnabled="{Binding SelectedProjectItem.CanExecuteWait, Mode=OneWay}" />
													<CheckBox Content="Delete" IsChecked="{Binding SelectedProjectItem.ExecuteDelete}" IsEnabled="{Binding SelectedProjectItem.CanExecuteDelete, Mode=OneWay}" />
													<TextBlock Text="Command Line:" Margin="0,5" />
													<TextBox Text="{Binding SelectedProjectItem.CommandLine, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource UITextBox}" />
												</StackPanel>
											</GroupBox>
											<GroupBox Grid.Row="1" Grid.Column="2">
												<GroupBox.Header>
													<local:TextDisplay Text="Anti's" InfoIcon="File will not be processed if any of the following is detected" />
												</GroupBox.Header>
												<StackPanel>
													<CheckBox IsChecked="{Binding SelectedProjectItem.AntiSandboxie}">
														<local:TextDisplay Text="Sandboxie" InfoIcon="Process is running in Sandboxie (SbieDll.dll module loaded)" />
													</CheckBox>
													<CheckBox IsChecked="{Binding SelectedProjectItem.AntiWireshark}">
														<local:TextDisplay Text="Wireshark" InfoIcon="Wireshark is running" />
													</CheckBox>
													<CheckBox IsChecked="{Binding SelectedProjectItem.AntiProcessMonitor}">
														<local:TextDisplay Text="Process Monitor" InfoIcon="Process Monitor is running" />
													</CheckBox>
													<CheckBox IsChecked="{Binding SelectedProjectItem.AntiEmulator}">
														<local:TextDisplay Text="Emulator" InfoIcon="Generic emulator test (takes 500 ms)" />
													</CheckBox>
												</StackPanel>
											</GroupBox>
										</Grid>
									</StackPanel>
								</Grid>
								<Grid Tag="ProjectUrl" Style="{StaticResource TabGrid}">
									<StackPanel>
										<TextBlock Text="URL Download" Style="{StaticResource Title}" />
										<Grid>
											<Grid.RowDefinitions>
												<RowDefinition Height="Auto" />
												<RowDefinition Height="Auto" />
												<RowDefinition Height="Auto" />
											</Grid.RowDefinitions>
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="*" />
												<ColumnDefinition Width="10" />
												<ColumnDefinition Width="*" />
											</Grid.ColumnDefinitions>
											<GroupBox Grid.ColumnSpan="3" Header="Download URL">
												<StackPanel>
													<TextBox Text="{Binding SelectedProjectItem.Url, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource UITextBox}" />
												</StackPanel>
											</GroupBox>
											<GroupBox Grid.Row="1" Header="File Modification">
												<StackPanel>
													<CheckBox IsChecked="{Binding SelectedProjectItem.Hidden}">
														<local:TextDisplay Text="Hidden" InfoIcon="Hide file by attributes Hidden|System" />
													</CheckBox>
												</StackPanel>
											</GroupBox>
											<GroupBox Grid.Row="1" Grid.Column="2" Header="Dropping">
												<StackPanel>
													<TextBlock Text="File Name:" Margin="0,0,0,5" />
													<TextBox Text="{Binding SelectedProjectItem.Name, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource UITextBox}" Margin="0,0,0,10" />
													<TextBlock Text="Location:" Margin="0,0,0,5" />
													<ComboBox ItemsSource="{x:Static local:Lookups.DropLocations}" SelectedValuePath="Key" DisplayMemberPath="Value" SelectedValue="{Binding SelectedProjectItem.DropLocation}" Style="{StaticResource UIComboBox}" />
												</StackPanel>
											</GroupBox>
											<GroupBox Grid.Row="2" Header="Execution">
												<StackPanel>
													<CheckBox Content="Execute" IsChecked="{Binding SelectedProjectItem.Execute}" />
													<CheckBox IsChecked="{Binding SelectedProjectItem.Runas}" IsEnabled="{Binding SelectedProjectItem.Execute}">
														<local:TextDisplay Text="Run as Administrator" InfoIcon="Execute with 'runas' verb (will trigger the UAC dialog)" />
													</CheckBox>
													<CheckBox Content="Wait for exit" IsChecked="{Binding SelectedProjectItem.ExecuteWait}" IsEnabled="{Binding SelectedProjectItem.CanExecuteWait, Mode=OneWay}" />
													<CheckBox Content="Delete" IsChecked="{Binding SelectedProjectItem.ExecuteDelete}" IsEnabled="{Binding SelectedProjectItem.CanExecuteDelete, Mode=OneWay}" />
													<TextBlock Text="Command Line:" Margin="0,5" />
													<TextBox Text="{Binding SelectedProjectItem.CommandLine, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource UITextBox}" />
												</StackPanel>
											</GroupBox>
											<GroupBox Grid.Row="2" Grid.Column="2">
												<GroupBox.Header>
													<local:TextDisplay Text="Anti's" InfoIcon="File will not be processed if any of the following is detected" />
												</GroupBox.Header>
												<StackPanel>
													<CheckBox IsChecked="{Binding SelectedProjectItem.AntiSandboxie}">
														<local:TextDisplay Text="Sandboxie" InfoIcon="Process is running in Sandboxie (SbieDll.dll module loaded)" />
													</CheckBox>
													<CheckBox IsChecked="{Binding SelectedProjectItem.AntiWireshark}">
														<local:TextDisplay Text="Wireshark" InfoIcon="Wireshark is running" />
													</CheckBox>
													<CheckBox IsChecked="{Binding SelectedProjectItem.AntiProcessMonitor}">
														<local:TextDisplay Text="Process Monitor" InfoIcon="Process Monitor is running" />
													</CheckBox>
													<CheckBox IsChecked="{Binding SelectedProjectItem.AntiEmulator}">
														<local:TextDisplay Text="Emulator" InfoIcon="Generic emulator test (takes 500 ms)" />
													</CheckBox>
												</StackPanel>
											</GroupBox>
										</Grid>
									</StackPanel>
								</Grid>
								<Grid Tag="ProjectMessageBox" Style="{StaticResource TabGrid}">
									<StackPanel>
										<TextBlock Text="Message Box" Style="{StaticResource Title}" />
										<Grid>
											<Grid.RowDefinitions>
												<RowDefinition Height="Auto" />
												<RowDefinition Height="Auto" />
												<RowDefinition Height="Auto" />
												<RowDefinition Height="Auto" />
												<RowDefinition Height="Auto" />
											</Grid.RowDefinitions>
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="Auto" />
												<ColumnDefinition Width="10" />
												<ColumnDefinition Width="*" />
											</Grid.ColumnDefinitions>
											<TextBlock Text="Title" Margin="0,5,0,0" />
											<TextBlock Grid.Row="1" Text="Text" Margin="0,5,0,0" />
											<TextBlock Grid.Row="2" Text="Buttons" Margin="0,5,0,0" />
											<TextBlock Grid.Row="3" Text="Icon" Margin="0,5,0,0" />
											<TextBox Grid.Column="2" Text="{Binding SelectedProjectItem.Title, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource UITextBox}" Margin="0,0,0,5" />
											<TextBox Grid.Row="1" Grid.Column="2" Text="{Binding SelectedProjectItem.Text, UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="True" Height="100" ScrollViewer.HorizontalScrollBarVisibility="Auto" ScrollViewer.VerticalScrollBarVisibility="Visible" Style="{StaticResource UITextBox}" Margin="0,0,0,5" />
											<ComboBox Grid.Row="2" Grid.Column="2" ItemsSource="{x:Static local:Lookups.MessageBoxButtons}" SelectedValuePath="Key" DisplayMemberPath="Value" SelectedValue="{Binding SelectedProjectItem.Buttons}" Style="{StaticResource UIComboBox}" Margin="0,0,0,10" />
											<StackPanel Grid.Row="3" Grid.Column="2" Orientation="Horizontal" Margin="0,0,0,10">
												<RadioButton Content="None" VerticalContentAlignment="Center" Margin="0,0,10,0" IsChecked="{Binding SelectedProjectItem.IsIconNone}" />
												<RadioButton VerticalContentAlignment="Center" Margin="0,0,10,0" IsChecked="{Binding SelectedProjectItem.IsIconInformation}">
													<StackPanel Orientation="Horizontal">
														<Image Source="/PEunion;component/Resources/ImageMessageBoxInformation.png" />
														<TextBlock Text="Information" VerticalAlignment="Center" Margin="5,0,0,0" />
													</StackPanel>
												</RadioButton>
												<RadioButton VerticalContentAlignment="Center" Margin="0,0,10,0" IsChecked="{Binding SelectedProjectItem.IsIconWarning}">
													<StackPanel Orientation="Horizontal">
														<Image Source="/PEunion;component/Resources/ImageMessageBoxWarning.png" />
														<TextBlock Text="Warning" VerticalAlignment="Center" Margin="5,0,0,0" />
													</StackPanel>
												</RadioButton>
												<RadioButton VerticalContentAlignment="Center" Margin="0,0,10,0" IsChecked="{Binding SelectedProjectItem.IsIconError}">
													<StackPanel Orientation="Horizontal">
														<Image Source="/PEunion;component/Resources/ImageMessageBoxError.png" />
														<TextBlock Text="Error" VerticalAlignment="Center" Margin="5,0,0,0" />
													</StackPanel>
												</RadioButton>
												<RadioButton VerticalContentAlignment="Center" Margin="0,0,10,0" IsChecked="{Binding SelectedProjectItem.IsIconConfirmation}">
													<StackPanel Orientation="Horizontal">
														<Image Source="/PEunion;component/Resources/ImageMessageBoxConfirmation.png" />
														<TextBlock Text="Confirmation" VerticalAlignment="Center" Margin="5,0,0,0" />
													</StackPanel>
												</RadioButton>
											</StackPanel>
											<Button Grid.Row="4" Grid.Column="2" Content="Preview" Style="{StaticResource UIButton}" HorizontalAlignment="Left" Click="btnPreviewMessageBox_Click" />
										</Grid>
									</StackPanel>
								</Grid>
							</Grid>
						</ScrollViewer>
					</Grid>
				</TabItem>
			</TabControl>
			<GridSplitter Grid.Row="1" ResizeDirection="Rows" ResizeBehavior="PreviousAndNext" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
			<GroupBox Grid.Row="2" Header="Errors" Style="{StaticResource DockPanel}">
				<DockPanel>
					<ToolBarTray DockPanel.Dock="Top">
						<ToolBar>
							<ToggleButton Name="btnShowValidationErrors" IsChecked="True" Checked="btnShowValidationErrors_CheckedUnchecked" Unchecked="btnShowValidationErrors_CheckedUnchecked">
								<StackPanel Orientation="Horizontal">
									<Image Source="/PEunion;component/Resources/IconError.png" Margin="0,0,5,0" />
									<TextBlock>
										<Run Text="{Binding Project.ValidationErrorCount}" />
										<Run Text="Errors" />
									</TextBlock>
								</StackPanel>
							</ToggleButton>
							<Separator />
							<ToggleButton Name="btnShowValidationWarnings" IsChecked="True" Checked="btnShowValidationErrors_CheckedUnchecked" Unchecked="btnShowValidationErrors_CheckedUnchecked">
								<StackPanel Orientation="Horizontal">
									<Image Source="/PEunion;component/Resources/IconWarning.png" Margin="0,0,5,0" />
									<TextBlock>
										<Run Text="{Binding Project.ValidationWarningCount}" />
										<Run Text="Warnings" />
									</TextBlock>
								</StackPanel>
							</ToggleButton>
							<Separator />
							<ToggleButton Name="btnShowValidationMessages" IsChecked="True" Checked="btnShowValidationErrors_CheckedUnchecked" Unchecked="btnShowValidationErrors_CheckedUnchecked">
								<StackPanel Orientation="Horizontal">
									<Image Source="/PEunion;component/Resources/IconInformation.png" Margin="0,0,5,0" />
									<TextBlock>
										<Run Text="{Binding Project.ValidationMessageCount}" />
										<Run Text="Messages" />
									</TextBlock>
								</StackPanel>
							</ToggleButton>
						</ToolBar>
					</ToolBarTray>
					<ListView BorderThickness="0" ItemsSource="{Binding ValidationErrors}">
						<ListView.Resources>
							<Style TargetType="{x:Type GridViewColumnHeader}">
								<Setter Property="Padding" Value="5,0" />
								<Setter Property="HorizontalContentAlignment" Value="Left" />
							</Style>
							<Style TargetType="TextBlock">
								<Setter Property="TextTrimming" Value="CharacterEllipsis" />
							</Style>
						</ListView.Resources>
						<ListView.View>
							<GridView>
								<GridViewColumn Width="30">
									<GridViewColumn.CellTemplate>
										<DataTemplate>
											<Grid>
												<Image Source="/PEunion;component/Resources/IconError.png" Visibility="{Binding Type, Converter={ui:EqualityConverter Equal, Visibility}, ConverterParameter={x:Static local:ValidationErrorType.Error}}" />
												<Image Source="/PEunion;component/Resources/IconWarning.png" Visibility="{Binding Type, Converter={ui:EqualityConverter Equal, Visibility}, ConverterParameter={x:Static local:ValidationErrorType.Warning}}" />
												<Image Source="/PEunion;component/Resources/IconInformation.png" Visibility="{Binding Type, Converter={ui:EqualityConverter Equal, Visibility}, ConverterParameter={x:Static local:ValidationErrorType.Message}}" />
											</Grid>
										</DataTemplate>
									</GridViewColumn.CellTemplate>
								</GridViewColumn>
								<GridViewColumn Width="200" Header="Source" DisplayMemberBinding="{Binding Source}" />
								<GridViewColumn Width="50" Header="Line" DisplayMemberBinding="{Binding Line}" />
								<GridViewColumn Width="600" Header="Description" DisplayMemberBinding="{Binding Description}" />
							</GridView>
						</ListView.View>
					</ListView>
				</DockPanel>
			</GroupBox>
		</Grid>
		<Grid Grid.Row="4" Style="{StaticResource HorizontalSeparator}" />
		<StatusBar Grid.Row="5">
			<StatusBarItem>
				<TextBlock>
					<Run Text="Version" />
					<Run Text="{x:Static local:App.Version}" />
				</TextBlock>
			</StatusBarItem>
		</StatusBar>
		<Border Name="ctrlOverlay" Grid.RowSpan="1000" Grid.ColumnSpan="1000" Background="#7f000000" Visibility="Collapsed">
			<Border HorizontalAlignment="Center" VerticalAlignment="Center" Background="White" Padding="20">
				<StackPanel>
					<TextBlock Text="{Binding OverlayTitle}" Margin="0,0,0,5" />
					<ProgressBar Width="200" Value="{Binding OverlayProgress}" IsIndeterminate="{Binding OverlayIsIndeterminate}" Style="{StaticResource UIProgressBar}" />
				</StackPanel>
			</Border>
		</Border>
	</Grid>
</ui:ObservableWindow>