<Application 
	x:Class="PEunion.App"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:local="clr-namespace:PEunion"
	xmlns:api="https://schemas.bytecode77.com/2019/xaml/api"
	xmlns:ui="https://schemas.bytecode77.com/2019/xaml/presentation"
	StartupUri="Windows/WindowMain.xaml" ShutdownMode="OnMainWindowClose" Startup="Application_Startup">
	<Application.Resources>
		<Style TargetType="{x:Type Image}">
			<Setter Property="Stretch" Value="None" />
			<Style.Triggers>
				<Trigger Property="IsEnabled" Value="False">
					<Setter Property="Opacity" Value=".5" />
					<Setter Property="Effect">
						<Setter.Value>
							<ui:GrayscaleEffect />
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style TargetType="{x:Type TextBox}">
			<Style.Triggers>
				<Trigger Property="IsReadOnly" Value="True">
					<Setter Property="Background" Value="#f7f7f7" />
					<Setter Property="Foreground" Value="#404040" />
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style TargetType="{x:Type ToolTip}">
			<Setter Property="ContentTemplate">
				<Setter.Value>
					<DataTemplate>
						<StackPanel>
							<TextBlock Text="{Binding}" MaxWidth="200" TextWrapping="Wrap" />
						</StackPanel>
					</DataTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style TargetType="{x:Type GroupBox}">
			<Setter Property="Padding" Value="10" />
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" Value="White" />
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style TargetType="{x:Type GridSplitter}">
			<Setter Property="Background" Value="#304362" />
		</Style>

		<Style x:Key="UIButton" TargetType="{x:Type Button}">
			<Setter Property="Padding" Value="10,5" />
			<Setter Property="MinWidth" Value="80" />
		</Style>
		<Style x:Key="UITextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
			<Setter Property="Padding" Value="6,5" />
		</Style>
		<Style x:Key="UIComboBox" TargetType="{x:Type ComboBox}">
			<Setter Property="Padding" Value="10,5" />
		</Style>
		<Style x:Key="UIProgressBar" TargetType="{x:Type ProgressBar}">
			<Setter Property="Height" Value="20" />
		</Style>
		<Style x:Key="CloseButton" TargetType="{x:Type Button}">
			<Setter Property="Margin" Value="5,2,0,0" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Image Name="Image" Source="/PEunion;component/Resources/IconTabItemClose.png" />
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter TargetName="Image" Property="Source" Value="/PEunion;component/Resources/IconTabItemCloseMouseOver.png" />
							</Trigger>
							<Trigger Property="IsPressed" Value="True">
								<Setter TargetName="Image" Property="Source" Value="/PEunion;component/Resources/IconTabItemCloseMouseDown.png" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="HorizontalSeparator" TargetType="{x:Type Grid}">
			<Setter Property="Height" Value="6" />
			<Setter Property="Background" Value="#304362" />
		</Style>
		<Style x:Key="DockPanel" TargetType="{x:Type GroupBox}">
			<Setter Property="Foreground" Value="White" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="GroupBox">
						<Border BorderThickness="1" BorderBrush="#8e9bbc" Focusable="True">
							<DockPanel>
								<Border x:Name="Border" DockPanel.Dock="Top" Background="#4d6082" Padding="5,2">
									<TextBlock Name="Header">
										<ContentPresenter ContentSource="Header" RecognizesAccessKey="True" />
									</TextBlock>
								</Border>
								<ContentPresenter />
							</DockPanel>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocusWithin" Value="True">
								<Setter Property="Foreground" Value="Black" TargetName="Header" />
								<Setter Property="Background" Value="#fff29d" TargetName="Border" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style TargetType="{x:Type TreeView}">
			<Style.Resources>
				<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#cbe8f6" />
				<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#f6f6f6" />
				<SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
				<SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black" />
			</Style.Resources>
		</Style>
		<Style TargetType="{x:Type TreeViewItem}">
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="Padding" Value="5,2" />
			<Setter Property="IsExpanded" Value="True" />
			<Style.Triggers>
				<Trigger Property="IsSelected" Value="True">
					<Setter Property="BorderBrush" Value="#26a0da" />
				</Trigger>
				<MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="ui:TreeViewItemService.IsMouseDirectlyOverItem" Value="True" />
						<Condition Property="IsSelected" Value="False" />
					</MultiTrigger.Conditions>
					<Setter Property="Background" Value="#e5f3fb" />
					<Setter Property="BorderBrush" Value="#70c0e7" />
				</MultiTrigger>
				<MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="IsSelected" Value="True" />
						<Condition Property="IsSelectionActive" Value="False" />
					</MultiTrigger.Conditions>
					<Setter Property="BorderBrush" Value="#dadada" />
				</MultiTrigger>
			</Style.Triggers>
		</Style>

		<Style TargetType="{x:Type TabControl}">
			<Setter Property="Padding" Value="0" />
			<Setter Property="BorderThickness" Value="0" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TabControl}">
						<Grid UseLayoutRounding="True" Background="#304362">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="*" />
							</Grid.RowDefinitions>
							<TabPanel IsItemsHost="True" />
							<Border Grid.Row="1" Background="#f7f7f7" BorderThickness="0,3,0,0" BorderBrush="#fff29d">
								<ContentPresenter ContentSource="SelectedContent" />
							</Border>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style TargetType="{x:Type TabItem}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TabItem}">
						<TextBlock Name="TextBlock" Background="#364e6f">
							<ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Margin="8,3" />
						</TextBlock>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Background" Value="#5b7199" TargetName="TextBlock" />
							</Trigger>
							<Trigger Property="IsSelected" Value="True">
								<Setter Property="Background" Value="#fff29d" TargetName="TextBlock" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style TargetType="{x:Type StatusBar}">
			<Setter Property="Foreground" Value="White" />
			<Setter Property="Background" Value="#007acc" />
		</Style>

		<Style TargetType="{x:Type ToolBarTray}">
			<Setter Property="Background" Value="#d6dBe9" />
		</Style>
		<Style TargetType="{x:Type ToolBar}">
			<Setter Property="Background" Value="#cfd6e5" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="BorderBrush" Value="#dce0ec" />
		</Style>
		<Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}">
			<Setter Property="HorizontalAlignment" Value="Center" />
			<Setter Property="VerticalAlignment" Value="Center" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
			<Setter Property="VerticalContentAlignment" Value="Center" />
			<Setter Property="Margin" Value="0,-1,0,-2" />
			<Setter Property="Background" Value="Transparent" />
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border x:Name="Border" SnapsToDevicePixels="True" BorderThickness="1" Padding="{TemplateBinding Padding}" Background="Transparent">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Background" Value="#fdf4bf" TargetName="Border" />
								<Setter Property="BorderBrush" Value="#E5c365" TargetName="Border" />
							</Trigger>
							<Trigger Property="IsPressed" Value="True">
								<Setter Property="Background" Value="#fff29d" TargetName="Border" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" TargetType="{x:Type ToggleButton}">
			<Setter Property="Margin" Value="0,-1,0,-2" />
			<Setter Property="Background" Value="Transparent" />
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border x:Name="Border" SnapsToDevicePixels="True" BorderThickness="1" Padding="{TemplateBinding Padding}" Background="Transparent">
							<ContentPresenter Margin="1,0,3,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Background" Value="#fdf4bf" TargetName="Border" />
								<Setter Property="BorderBrush" Value="#E5c365" TargetName="Border" />
							</Trigger>
							<Trigger Property="IsPressed" Value="True">
								<Setter Property="Background" Value="#fff29d" TargetName="Border" />
							</Trigger>
							<Trigger Property="IsChecked" Value="True">
								<Setter Property="Background" Value="#fffcf4" TargetName="Border" />
								<Setter Property="BorderBrush" Value="#4d6082" TargetName="Border" />
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsChecked" Value="True" />
									<Condition Property="IsMouseOver" Value="True" />
								</MultiTrigger.Conditions>
								<Setter Property="BorderBrush" Value="#e5c365" TargetName="Border" />
							</MultiTrigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="{x:Static ToolBar.SeparatorStyleKey}">
			<Setter Property="Panel.Margin" Value="5,2,4,0" />
			<Setter Property="Panel.Background" Value="#8591a2" />
		</Style>

		<Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
			<Setter Property="OverridesDefaultStyle" Value="True" />
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Menu}">
						<Border Padding="1" Background="#d6dbe9">
							<StackPanel ClipToBounds="True" Orientation="Horizontal" IsItemsHost="True" />
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
			<Setter Property="OverridesDefaultStyle" Value="True" />
			<Style.Triggers>
				<Trigger Property="Role" Value="TopLevelHeader">
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type MenuItem}">
								<Border x:Name="Border" BorderThickness="1" Background="Transparent">
									<Grid>
										<ContentPresenter Margin="9,-1,9,1" ContentSource="Header" RecognizesAccessKey="True" />
										<Popup Placement="Bottom" HorizontalOffset="-1" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False">
											<Border SnapsToDevicePixels="True" BorderThickness="1,0,1,1" BorderBrush="#9ba7b7" Background="#eaf0ff">
												<Grid>
													<Grid.RowDefinitions>
														<RowDefinition Height="1" />
														<RowDefinition Height="*" />
													</Grid.RowDefinitions>
													<Grid.ColumnDefinitions>
														<ColumnDefinition Width="27" />
														<ColumnDefinition Width="*" />
													</Grid.ColumnDefinitions>
													<Border Grid.Row="1" Background="#f2f4fe" />
													<Border Grid.ColumnSpan="2" Height="1" HorizontalAlignment="Stretch" Background="#9ba7b7" />
													<Border Grid.ColumnSpan="2" Height="1" Width="{Binding ActualWidth, ElementName=Grid}" HorizontalAlignment="Left" Background="#eaf0ff" />
													<StackPanel Grid.Row="2" Grid.Column="1" Margin="-25,2,2,2" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
													<Grid Grid.ColumnSpan="2" Width="{Binding ActualWidth, ElementName=Border}">
														<Grid x:Name="Grid" Margin="2,0,0,0" />
													</Grid>
												</Grid>
											</Border>
										</Popup>
									</Grid>
								</Border>
								<ControlTemplate.Triggers>
									<Trigger Property="IsHighlighted" Value="True">
										<Setter Property="BorderBrush" Value="#e5c365" TargetName="Border" />
										<Setter Property="Background" Value="#fdf4bf" TargetName="Border" />
									</Trigger>
									<Trigger Property="IsSubmenuOpen" Value="True">
										<Setter Property="BorderBrush" Value="#9ba7b7" TargetName="Border" />
										<Setter Property="Background" Value="#eaf0ff" TargetName="Border" />
									</Trigger>
									<Trigger Property="IsEnabled" Value="False">
										<Setter Property="Foreground" Value="#808080" />
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
					<Setter Property="Grid.IsSharedSizeScope" Value="True" />
				</Trigger>
				<Trigger Property="Role" Value="TopLevelItem">
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type MenuItem}">
								<ContentPresenter Margin="9,1" ContentSource="Header" RecognizesAccessKey="True" />
								<ControlTemplate.Triggers>
									<Trigger Property="IsEnabled" Value="False">
										<Setter Property="Foreground" Value="#808080" />
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Trigger>
				<Trigger Property="Role" Value="SubmenuHeader">
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type MenuItem}">
								<Border x:Name="Border" BorderThickness="1">
									<Grid Background="Transparent">
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
											<ColumnDefinition Width="*" />
											<ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
											<ColumnDefinition Width="16" />
										</Grid.ColumnDefinitions>
										<ContentPresenter x:Name="Icon" Width="16" Height="16" Margin="5,3,14,3" VerticalAlignment="Center" ContentSource="Icon" />
										<ContentPresenter Grid.Column="1" ContentSource="Header" VerticalAlignment="Center" RecognizesAccessKey="True" />
										<TextBlock Grid.Column="2" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center" Margin="40,0,0,0" DockPanel.Dock="Right" />
										<Path Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 0 7 L 4 3.5 Z" Fill="Black" />
										<Popup Placement="Right" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False">
											<Border SnapsToDevicePixels="True" BorderThickness="1" BorderBrush="#9ba7b7" Background="#eaf0ff">
												<Grid>
													<Grid.ColumnDefinitions>
														<ColumnDefinition Width="27" />
														<ColumnDefinition Width="*" />
													</Grid.ColumnDefinitions>
													<Border Background="#f2f4fe" />
													<StackPanel Grid.Column="1" Margin="-25,2,2,2" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
												</Grid>
											</Border>
										</Popup>
									</Grid>
								</Border>
								<ControlTemplate.Triggers>
									<Trigger Property="Icon" Value="{x:Null}">
										<Setter Property="Visibility" Value="Hidden" TargetName="Icon" />
									</Trigger>
									<Trigger Property="IsHighlighted" Value="True">
										<Setter Property="Background" Value="#fdf4bf" TargetName="Border" />
									</Trigger>
									<Trigger Property="IsEnabled" Value="False">
										<Setter Property="Foreground" Value="#808080" />
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Trigger>
				<Trigger Property="Role" Value="SubmenuItem">
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type MenuItem}">
								<Border x:Name="Border">
									<Grid Background="Transparent">
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
											<ColumnDefinition Width="*" />
											<ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
											<ColumnDefinition Width="16" />
										</Grid.ColumnDefinitions>
										<ContentPresenter x:Name="Icon" Width="16" Height="16" Margin="5,3,14,3" VerticalAlignment="Center" ContentSource="Icon" />
										<Border x:Name="Check" Width="16" Height="16" Margin="5,3,14,3" Visibility="Hidden" BorderBrush="Purple" Background="#e9ecee">
											<Path x:Name="CheckMark" Width="10" Height="10" Visibility="Hidden" SnapsToDevicePixels="False" StrokeThickness="2" Data="M 8 2 L 4 11 L 2 6" Stroke="Black" />
										</Border>
										<ContentPresenter Grid.Column="1" ContentSource="Header" VerticalAlignment="Center" RecognizesAccessKey="True" />
										<TextBlock Grid.Column="2" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center" Margin="40,0,0,0" DockPanel.Dock="Right" />
									</Grid>
								</Border>
								<ControlTemplate.Triggers>
									<Trigger Property="Icon" Value="{x:Null}">
										<Setter Property="Visibility" Value="Hidden" TargetName="Icon" />
									</Trigger>
									<Trigger Property="IsChecked" Value="True">
										<Setter Property="Visibility" Value="Visible" TargetName="CheckMark" />
									</Trigger>
									<Trigger Property="IsCheckable" Value="True">
										<Setter Property="Visibility" Value="Visible" TargetName="Check" />
										<Setter Property="Visibility" Value="Hidden" TargetName="Icon" />
									</Trigger>
									<Trigger Property="IsHighlighted" Value="True">
										<Setter Property="Background" Value="#fdf4bf" TargetName="Border" />
										<Setter Property="Background" Value="#fffcf4" TargetName="Check" />
									</Trigger>
									<Trigger Property="IsEnabled" Value="False">
										<Setter Property="Foreground" Value="#808080" />
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style TargetType="{x:Type ContextMenu}">
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="OverridesDefaultStyle" Value="True" />
			<Setter Property="Grid.IsSharedSizeScope" Value="True" />
			<Setter Property="HasDropShadow" Value="True" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ContextMenu}">
						<Border BorderThickness="1" BorderBrush="#9ba7b7" Background="#eaf0ff">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="27" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<Border Background="#f2f4fe" />
								<StackPanel Grid.Column="1" Margin="-25,2,2,2" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
							</Grid>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
			<Setter Property="Height" Value="1" />
			<Setter Property="Margin" Value="32,1,3,1" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Separator}">
						<Border BorderThickness="1" BorderBrush="#bec3cb" />
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	</Application.Resources>
</Application>