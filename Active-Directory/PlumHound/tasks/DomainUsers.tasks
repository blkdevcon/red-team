["Domain Users with path to DA", "HTML", "DU_path_DA.html", "MATCH p=ShortestPath((n:Group)-[*1..]->(m:Group)) WHERE n.name STARTS WITH 'DOMAIN USERS' and m.name CONTAINS 'DOMAIN ADMINS' AND n <> m RETURN p" ]
["Domain Users Admin Rights", "HTML", "DU_Admin_Comp.html", "MATCH p=(m:Group)-[:AdminTo|MemberOf*1..]->(n:Computer) WHERE m.name STARTS WITH 'DOMAIN USERS' RETURN n.name as Computer"]
["Domain Users Can RDP", "HTML", "DU_CanRDP_Comp.html", "match p=(g:Group)-[:CanRDP|MemberOf*1..]->(c:Computer) where g.name STARTS WITH 'DOMAIN USERS' return c.name as Computer"]
["Domain Users with easy path to DA", "HTML", "DU_Easy_Path_DA.html", "match p=shortestpath((g:Group)-[:AdminTo|MemberOf|Owns|Contains|GenericAll*1..]->(m {highvalue:true})) where g.name starts with 'DOMAIN USERS' and g<>m return p"]
["Domain Users Unconstrained to Computer", "HTML", "DU_Unconstrain.html", "MATCH p=shortestPath((g:Group)-[*1..]->(c:Computer {unconstraineddelegation: true}))  WHERE g.name STARTS WITH 'DOMAIN USERS' RETURN c.name as Computer"]
[ "Kerberoastable Users", "HTML", "Kerberoastable_Users.html", "MATCH (n:User) WHERE n.hasspn=true RETURN n.name as Username, n.displayname as DisplayName,n.description as Description, n.title as Title, n.pwdneverexpires as PasswordNeverExpires, n.passwordnotreqd as PasswordNotRequired, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPNs" ]
["Users Sessions", "HTML", "Users_Sessions.html", "MATCH p=(n:User)--(c:Computer)-[:HasSession]->(n) return n.name as User,  c.name as Computer ORDER BY n.name"]
["Users Sessions Count", "HTML", "Users_Sessions_Count.html", "MATCH p=(n:User)--(c:Computer)-[:HasSession]->(n) return n.name as User, count(*) as Computers ORDER BY Computers DESC"]
["Users With 6 Month Old Passwords","HTML","Users_6MoOldPasswords.html","WITH timestamp() / 1000 AS date_now MATCH (n:User) WHERE date_now - toInteger(n.pwdlastset) > 15552000 AND n.pwdlastset<>-1.0  AND n.pwdlastset<>0.0 RETURN n.name as Username, n.displayname as DisplayName, n.description as Description, n.enabled as Enabled, n.admincount as AdminCount, n.pwdneverexpires as PassNeverExpire, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon ORDER BY n.pwdlastset"]
["Users With 5 Year Old Passwords","HTML","Users_5YrOldPasswords.html","WITH timestamp() / 1000 AS date_now MATCH (n:User) WHERE date_now - toInteger(n.pwdlastset) > 157680000 AND n.pwdlastset<>-1.0  AND n.pwdlastset<>0.0 RETURN n.name as Username, n.displayname as DisplayName, n.description as Description, n.enabled as Enabled, n.admincount as AdminCount, n.pwdneverexpires as PassNeverExpire, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon ORDER BY n.pwdlastset"]
["Users With 10 Year Old Passwords","HTML","Users_10YrOldPasswords.html","WITH timestamp() / 1000 AS date_now MATCH (n:User) WHERE date_now - toInteger(n.pwdlastset) > 315360000 AND n.pwdlastset<>-1.0  AND n.pwdlastset<>0.0 RETURN n.name as Username, n.displayname as DisplayName, n.description as Description, n.enabled as Enabled, n.admincount as AdminCount, n.pwdneverexpires as PassNeverExpire, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon ORDER BY n.pwdlastset"]
["Users With Userpassword Attribute", "HTML", "Users_userpassword.html", "MATCH (u:User) WHERE NOT u.userpassword IS null RETURN u.name as User, u.userpassword as Password, u.enabled as Enabled"]
["User No Kerb Needed","HTML","Users_NoKerbReq.html","MATCH (n:User {dontreqpreauth: true}) RETURN n.name as Username, n.displayname as DisplayName, n.description as Description, n.title as Title, n.pwdneverexpires as PasswordNeverExpires, n.passwordnotreqd as PasswordNotRequired, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPNs"]
["Users Computer Direct Admin Count","HTML","Users_Count_DirectAdminComputers.html","MATCH (u:User)-[:AdminTo]->(c:Computer) RETURN count(DISTINCT(c.name)) AS COMPUTER, u.name AS USER ORDER BY count(DISTINCT(c.name)) DESC"]
["Users Computer InDirect Admin Count","HTML","Users_Count_InDirectAdminComputers.html","MATCH (u:User)-[:AdminTo]->(c:Computer) RETURN count(DISTINCT(c.name)) AS COMPUTER, u.name AS USER ORDER BY count(DISTINCT(c.name)) DESC"]
["Users with Add To Group Delegation (Limited to 10000)", "HTML", "User-AddToGroupDelegation.html", "MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN n.name as User, m.name as Group Limit 10000" ]
["Users Never Active","HTML","Users_NeverActive_Enabled.html","MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n.name as Username ORDER BY n.name"]
["Users Password Never Expires Exception", "HTML", "Users_NeverExpirePasswords.html", "MATCH (n:User) WHERE n.pwdneverexpires RETURN n.name as Name,n.displayname as DisplayName,n.enabled as Enabled, n.highvalue as HighValue,  n.description as Description, n.title as Title, n.pwdneverexpires as PWDNeverExpires, n.passwordnotreqd as PWDNotReqd, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPN, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon" ]
["Report Index", "HTML", "index.html", "REPORT-INDEX" ]
