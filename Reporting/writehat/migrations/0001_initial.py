# Generated by Django 3.1.3 on 2020-11-20 14:22

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import uuid
import writehat.lib.engagementFinding
import writehat.lib.finding
import writehat.models
import writehat.validation


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseFindingGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=str, max_length=1000, validators=[writehat.validation.isValidName])),
                ('createdDate', models.DateTimeField(auto_now_add=True)),
                ('modifiedDate', models.DateTimeField(auto_now=True)),
                ('engagementParent', models.UUIDField(editable=False, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('createdDate', models.DateTimeField(auto_now_add=True)),
                ('modifiedDate', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Company Name')),
                ('shortName', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Company Short Name')),
                ('domain', models.CharField(blank=True, max_length=100, null=True, verbose_name='Internal Domain')),
                ('website', models.CharField(blank=True, max_length=100, null=True, verbose_name='Primary Website')),
                ('address', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Company Address')),
                ('POC', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Company Point of Contact')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Contact Email Address')),
                ('phone', models.CharField(blank=True, max_length=100, null=True, verbose_name='Contact Phone Number')),
                ('parentResource', models.UUIDField(editable=False, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CVSSDatabaseFinding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=str, max_length=1000, validators=[writehat.validation.isValidName])),
                ('createdDate', models.DateTimeField(auto_now_add=True)),
                ('modifiedDate', models.DateTimeField(auto_now=True)),
                ('categoryID', models.UUIDField(editable=False, null=True)),
                ('isApproved', models.BooleanField(blank=True, default=False, null=True)),
                ('background', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('remediation', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('references', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('scoringType', models.CharField(default='CVSS', editable=False, max_length=50)),
                ('toolsUsed', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('vector', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(writehat.lib.finding.DatabaseOnlyFinding, models.Model),
        ),
        migrations.CreateModel(
            name='CVSSEngagementFinding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=str, max_length=1000, validators=[writehat.validation.isValidName])),
                ('createdDate', models.DateTimeField(auto_now_add=True)),
                ('modifiedDate', models.DateTimeField(auto_now=True)),
                ('categoryID', models.UUIDField(editable=False, null=True)),
                ('isApproved', models.BooleanField(blank=True, default=False, null=True)),
                ('background', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('remediation', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('references', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('scoringType', models.CharField(default='CVSS', editable=False, max_length=50)),
                ('toolsUsed', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('vector', models.CharField(blank=True, max_length=150, null=True)),
                ('findingGroup', models.UUIDField(editable=False, null=True)),
                ('description', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('affectedResources', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('proofOfConcept', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(writehat.lib.engagementFinding.EngagementFinding, models.Model),
        ),
        migrations.CreateModel(
            name='DatabaseFindingCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=str, max_length=1000, validators=[writehat.validation.isValidName])),
                ('createdDate', models.DateTimeField(auto_now_add=True)),
                ('modifiedDate', models.DateTimeField(auto_now=True)),
                ('categoryParent', models.UUIDField(editable=False, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DREADFinding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=str, max_length=1000, validators=[writehat.validation.isValidName])),
                ('createdDate', models.DateTimeField(auto_now_add=True)),
                ('modifiedDate', models.DateTimeField(auto_now=True)),
                ('categoryID', models.UUIDField(editable=False, null=True)),
                ('isApproved', models.BooleanField(blank=True, default=False, null=True)),
                ('background', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('remediation', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('references', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('scoringType', models.CharField(default='DREAD', editable=False, max_length=50)),
                ('vector', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Engagement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=str, max_length=1000, validators=[writehat.validation.isValidName])),
                ('createdDate', models.DateTimeField(auto_now_add=True)),
                ('modifiedDate', models.DateTimeField(auto_now=True)),
                ('companyName', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Company Name')),
                ('companyShortName', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Company Short Name')),
                ('companyAddress', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Company Address')),
                ('companyPOC', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Company Point of Contact')),
                ('companyEmail', models.EmailField(blank=True, max_length=254, verbose_name='Contact Email Address')),
                ('companyPhone', models.CharField(blank=True, max_length=100, null=True, verbose_name='Contact Phone Number')),
                ('customerID', models.UUIDField(blank=True, null=True, verbose_name='Customer')),
                ('pageTemplateID', models.UUIDField(blank=True, null=True, verbose_name='Page Template')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ImageModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=str, max_length=1000, validators=[writehat.validation.isValidName])),
                ('createdDate', models.DateTimeField(auto_now_add=True)),
                ('modifiedDate', models.DateTimeField(auto_now=True)),
                ('data', models.BinaryField(blank=True, null=True)),
                ('caption', models.CharField(blank=True, default=str, max_length=1000, null=True, validators=[writehat.validation.isValidName])),
                ('size', models.IntegerField(null=True)),
                ('findingParent', models.UUIDField(blank=True, editable=False, null=True)),
                ('contentType', models.CharField(blank=True, max_length=20, null=True)),
                ('order', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PageTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=str, max_length=1000, validators=[writehat.validation.isValidName])),
                ('createdDate', models.DateTimeField(auto_now_add=True)),
                ('modifiedDate', models.DateTimeField(auto_now=True)),
                ('parentResource', models.UUIDField(editable=False, null=True)),
                ('background', models.UUIDField(editable=False, null=True)),
                ('logo', models.UUIDField(editable=False, null=True)),
                ('footer', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('default', models.BooleanField(blank=True, default=False, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProactiveFinding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=str, max_length=1000, validators=[writehat.validation.isValidName])),
                ('createdDate', models.DateTimeField(auto_now_add=True)),
                ('modifiedDate', models.DateTimeField(auto_now=True)),
                ('categoryID', models.UUIDField(editable=False, null=True)),
                ('isApproved', models.BooleanField(blank=True, default=False, null=True)),
                ('background', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('remediation', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('references', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('scoringType', models.CharField(default='PROACTIVE', editable=False, max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=str, max_length=1000, validators=[writehat.validation.isValidName])),
                ('createdDate', models.DateTimeField(auto_now_add=True)),
                ('modifiedDate', models.DateTimeField(auto_now=True)),
                ('_components', models.TextField(blank=True, default=str, validators=[writehat.validation.isValidComponentJSON])),
                ('pageTemplateID', models.UUIDField(blank=True, null=True)),
                ('engagementParent', models.UUIDField(editable=False, null=True)),
                ('_findings', models.TextField(blank=True, default=str, validators=[writehat.validation.isValidJSON])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Revision',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=str, max_length=1000, validators=[writehat.validation.isValidName])),
                ('createdDate', models.DateTimeField(auto_now_add=True)),
                ('modifiedDate', models.DateTimeField(auto_now=True)),
                ('parentId', models.UUIDField()),
                ('fieldName', models.CharField(max_length=50)),
                ('fieldText', models.TextField(max_length=30000)),
                ('version', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SavedReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=str, max_length=1000, validators=[writehat.validation.isValidName])),
                ('createdDate', models.DateTimeField(auto_now_add=True)),
                ('modifiedDate', models.DateTimeField(auto_now=True)),
                ('_components', models.TextField(blank=True, default=str, validators=[writehat.validation.isValidComponentJSON])),
                ('pageTemplateID', models.UUIDField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssigneeUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CVSSFindingGroup',
            fields=[
                ('basefindinggroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='writehat.basefindinggroup')),
                ('scoringType', models.CharField(default='CVSS', editable=False, max_length=50)),
                ('prefix', models.CharField(default='T', max_length=50, verbose_name='Finding Prefix')),
            ],
            options={
                'abstract': False,
            },
            bases=('writehat.basefindinggroup',),
        ),
        migrations.CreateModel(
            name='DREADDatabaseFinding',
            fields=[
                ('dreadfinding_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='writehat.dreadfinding')),
            ],
            options={
                'abstract': False,
            },
            bases=(writehat.lib.finding.DatabaseOnlyFinding, 'writehat.dreadfinding'),
        ),
        migrations.CreateModel(
            name='DREADEngagementFinding',
            fields=[
                ('dreadfinding_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='writehat.dreadfinding')),
                ('findingGroup', models.UUIDField(editable=False, null=True)),
                ('description', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('affectedResources', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('_dreadImpact', models.TextField(blank=True, default=str, max_length=200, null=True, validators=[writehat.validation.isValidJSONList])),
                ('descDamage', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('descReproducibility', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('descExploitability', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('descAffectedUsers', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('descDiscoverability', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(writehat.lib.engagementFinding.EngagementFinding, 'writehat.dreadfinding'),
        ),
        migrations.CreateModel(
            name='DREADFindingGroup',
            fields=[
                ('basefindinggroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='writehat.basefindinggroup')),
                ('scoringType', models.CharField(default='DREAD', editable=False, max_length=50)),
                ('prefix', models.CharField(default='NT', max_length=50, verbose_name='Finding Prefix')),
            ],
            options={
                'abstract': False,
            },
            bases=('writehat.basefindinggroup',),
        ),
        migrations.CreateModel(
            name='ProactiveDatabaseFinding',
            fields=[
                ('proactivefinding_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='writehat.proactivefinding')),
            ],
            options={
                'abstract': False,
            },
            bases=(writehat.lib.finding.DatabaseOnlyFinding, 'writehat.proactivefinding'),
        ),
        migrations.CreateModel(
            name='ProactiveEngagementFinding',
            fields=[
                ('proactivefinding_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='writehat.proactivefinding')),
                ('findingGroup', models.UUIDField(editable=False, null=True)),
                ('description', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
                ('affectedResources', writehat.models.MarkdownField(blank=True, max_length=30000, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(writehat.lib.engagementFinding.EngagementFinding, 'writehat.proactivefinding'),
        ),
        migrations.CreateModel(
            name='ProactiveFindingGroup',
            fields=[
                ('basefindinggroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='writehat.basefindinggroup')),
                ('scoringType', models.CharField(default='PROACTIVE', editable=False, max_length=50)),
                ('prefix', models.CharField(default='P', max_length=50, verbose_name='Finding Prefix')),
            ],
            options={
                'abstract': False,
            },
            bases=('writehat.basefindinggroup',),
        ),
    ]
