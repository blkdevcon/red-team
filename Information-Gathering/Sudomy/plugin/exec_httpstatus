#-Metadata----------------------------------------------------#
#  Filename: Sudomy - Subdomain Enumeration & Analysis        #
#-Author(s)---------------------------------------------------#
#  Edo maland ~ @screetsec                                    #
#-Info--------------------------------------------------------#
#  This file is part of Sudomy project                        #
#  Plugin HTTP Status : Update = 2020-06-06                   #
#-Licence-----------------------------------------------------#
#  MIT License ~ http://opensource.org/licenses/MIT           #
#-------------------------------------------------------------#



function exec_httpstatus(){

# Explain Reponse status Code
#
#       __________ 10.1 Informational 1xx
#  
#  This class of status code indicates a provisional response, consisting only of
#  the Status-Line and optional headers, and is terminated by an empty line.
#  There are no required headers for this class of status code. Since HTTP/1.0
#  did not define any 1xx status codes, servers MUST NOT send a 1xx response to
#  an HTTP/1.0 client except under experimental conditions.
#  
#  A client MUST be prepared to accept one or more 1xx status responses prior to
#  a regular response, even if the client does not expect a 100 (Continue) status
#  message. Unexpected 1xx status responses MAY be ignored by a user agent.
#  
#  Proxies MUST forward 1xx responses, unless the connection between the proxy
#  and its client has been closed, or unless the proxy itself requested the
#  generation of the 1xx response. (For example, if a proxy adds a "Expect:
#  100-continue" field when it forwards a request, then it need not forward the
#  corresponding 100 (Continue) response(s).) 
#
#       __________ 10.2 Successful 2xx
#  
#  This class of status code indicates that the client's request was successfully
#  received, understood, and accepted.
#
#       __________ 10.3 Redirection 3xx
#  
#  This class of status code indicates that further action needs to be taken by
#  the user agent in order to fulfill the request. The action required MAY be
#  carried out by the user agent without interaction with the user if and only if
#  the method used in the second request is GET or HEAD. A client SHOULD detect
#  infinite redirection loops, since such loops generate network traffic for each
#  redirection.
#  
#        Note: previous versions of this specification recommended a maximum of
#        five redirections. Content developers should be aware that there might
#        be clients that implement such a fixed limitation
#
#       __________ 10.4 Client Error 4xx
#  
#  The 4xx class of status code is intended for cases in which the client seems
#  to have erred. Except when responding to a HEAD request, the server SHOULD
#  include an entity containing an explanation of the error situation, and
#  whether it is a temporary or permanent condition. These status codes are
#  applicable to any request method. User agents SHOULD display any included
#  entity to the user.
#  
#  If the client is sending data, a server implementation using TCP SHOULD be
#  careful to ensure that the client acknowledges receipt of the packet(s)
#  containing the response, before the server closes the input connection. If the
#  client continues sending data to the server after the close, the server's TCP
#  stack will send a reset packet to the client, which may erase the client's
#  unacknowledged input buffers before they can be read and interpreted by the
#  HTTP application.
#
#       __________ 10.5 Server Error 5xx
#  
#  Response status codes beginning with the digit "5" indicate cases in which the
#  server is aware that it has erred or is incapable of performing the request.
#  Except when responding to a HEAD request, the server SHOULD include an entity
#  containing an explanation of the error situation, and whether it is a
#  temporary or permanent condition. User agents SHOULD display any included
#  entity to the user. These response codes are applicable to any request method.
  



echo -e "\n${BOLD}[${LGREEN}+${RESET}${BOLD}]${RESET}  Checks status code on port 80 and 443 "  
echo -e "---------------------------------------------\n"


## Cleaning Log Files ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE}
rm -r ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1 ##Cleaning old results

for SUB_CODE_CHECK in $(cat ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTPROBE}) ## GET Status Code from list of domains valid working http and https servers.
do
  RESPONSE=$(curl --write-out %{http_code} --silent --output /dev/null ${SUB_CODE_CHECK})

	if [[ ${RESPONSE} == 000 ]]; then
		INFO="Not-responding"	
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${BOLD}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 100 ]]; then ## 
		INFO="Informational:Continue"	
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${LPURPLE}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 101 ]]; then
		INFO="Informational:Switching_Protocols"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${LPURPLE}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 200 ]]; then
		INFO="Successful:OK"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${GREEN}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 201 ]]; then
		INFO="Successful:Created"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${GREEN}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 202 ]]; then
		INFO="Successful:Accepted"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${GREEN}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 203 ]]; then
		INFO="Successful:Non-Authoritative"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${GREEN}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 204 ]]; then
		INFO="Successful:No-Content"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${GREEN}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 205 ]]; then
		INFO="Successful:Reset-Content"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${GREEN}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 206 ]]; then
		INFO="Successful:Partial:Content"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${GREEN}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 300 ]]; then
		INFO="Redirection:Multiple-Choice"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${LBLUE}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 301 ]]; then
		INFO="Redirection:Moved-Permanently"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${LBLUE}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 302 ]]; then
		INFO="Redirection:Found:Residing"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${LBLUE}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 303 ]]; then
		INFO="Redirection:See-Other"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${LBLUE}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 304 ]]; then
		INFO="Redirection:Not-Modified"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${LBLUE}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 305 ]]; then
		INFO="Redirection:Use-Proxy"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${LBLUE}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 306 ]]; then
		INFO="Redirection:Status-notdefined"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${LBLUE}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 307 ]]; then
		INFO="Redirection:Temporary-redirect"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${LBLUE}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 400 ]]; then
		INFO="ClientError:Bad-Request"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 401 ]]; then
		INFO="ClientError:Unauthorized"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 402 ]]; then
		INFO="ClientError:Payment-Required"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 403 ]]; then
		INFO="ClientError:Forbidden"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 404 ]]; then
		INFO="ClientError:NotFound"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 405 ]]; then
		INFO="ClientError:Not-Allowed"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 406 ]]; then
		INFO="ClientError:Not-Accepted"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 407 ]]; then
		INFO="ClientError:Proxy-Auth-Required"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 408 ]]; then
		INFO="ClientError:Request-timeout"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 409 ]]; then
		INFO="ClientError:Conflict"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 410 ]]; then
		INFO="ClientError:Gone"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 411 ]]; then
		INFO="ClientError:Lenght-required"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 412 ]]; then
		INFO="ClientError:Precondition-Failed"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 413 ]]; then
		INFO="ClientError:Request-Entity-Too-Large"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 414 ]]; then
		INFO="ClientError:Request-URI-Too-Long"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 415 ]]; then
		INFO="ClientError:Unsupported-Media-Type"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 416 ]]; then
		INFO="ClientError:Request-Range-Not"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 417 ]]; then
		INFO="ClientError:Expectation-Failed"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${YELLOW}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 500 ]]; then
		INFO="ServerError:Internal-Server-Error"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${RED}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 501 ]]; then
		INFO="ServerError:Not-Implemented"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${RED}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 502 ]]; then
		INFO="ServerError:Bad-Gateway"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${RED}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 503 ]]; then
		INFO="ServerError:Service-Unavailable"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${RED}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 504 ]]; then
		INFO="ServerError:Gateway-Timeout"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${RED}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	elif [[ ${RESPONSE} == 505 ]]; then
		INFO="ServerError:HTTPv-Not-Support"
	        echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}[${RED}${RESPONSE}${RESET}]\t ${SUB_CODE_CHECK} ${RESET}"; echo -e "${SUB_CODE_CHECK} ${RESPONSE} ${INFO}"  | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
	fi
	     done
	
	#make output more pretty 
	cat ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} | sed 's/ / ,/g' | column -t -s, > ${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_HTTP_CODE}
	rm -r ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTP_CODE} > /dev/null 2>&1
}
