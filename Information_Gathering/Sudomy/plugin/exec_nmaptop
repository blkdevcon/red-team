#-Metadata----------------------------------------------------#
#  Filename: Sudomy - Subdomain Enumeration & Analysis        #
#-Author(s)---------------------------------------------------#
#  Edo maland ~ @screetsec                                    #
#-Info--------------------------------------------------------#
#  This file is part of Sudomy project                        #
#  Plugin Nmap Top  : Update = 2020-06-06                     #
#-Licence-----------------------------------------------------#
#  MIT License ~ http://opensource.org/licenses/MIT           #
#-------------------------------------------------------------#


function exec_nmaptop(){
## Cleaning Log Files ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_NMAP_HOSTS}

rm -r ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_NMAP_HOSTS} > /dev/null 2>&1

	if [[ -f ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_CFCHECK} ]]; then        ## Checking file cf_resolver.txt 
		echo -e "\n${BOLD}[${LGREEN}+${RESET}${BOLD}]${RESET} Port Scanner: Nmap Port Scanner top ports   "  ##  + Must running with argument -rS | --resolver / --dnsprobe 
		echo -e "---------------------------------------------\n"                 ###   Example : Sudomy --dnsprobe -nP/ --nmap 

		for SUB_RESOLV in $(cat ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_CFCHECK}) 
		do
		echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Scan host ${SUB_RESOLV} "
		
		Open_Ports=$(nmap --top-ports 1024 ${SUB_RESOLV} -T4 |   awk '/^Nmap scan report/{}/open/ { split($1,a,"/"); result[Host][a[1]]=""}
		       END {
		       for (i in result) {
		         printf i;
		         for (j in result[i])
		           printf ",%s", j ;
		         print ""} }' |   sed -e 's/,/\t/' )
		
		echo -e "${SUB_RESOLV} ${Open_Ports}" | tee -a ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_NMAP_HOSTS} > /dev/null 2>&1
		done 

	else
		echo -e "\n${BOLD}[${LGREEN}+${RESET}${BOLD}]${RESET} Host Resolver: Nmap Port Scanner   "
		echo -e "---------------------------------------------\n"
 		echo -e  "${PADDING}${RED}${PADDING}!${PADDING}${RESET}Run together with arg -rS${RESET}\t[${RED}FAIL${RESET}]\n"

	fi
 }
